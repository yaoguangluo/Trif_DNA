/*
 * 著作权人 ，作者 罗瑶光, 浏阳
 * yaoguangluo@outlook.com, 313699483@qq.com, 2080315360@qq.com, lyg.tin@gmail.com, lygtin@sina.com
 * 15116110525, 19173129338, 16674208794
 * 430181198505250014, G24402609, EB0581342 
 * 204925063, 389418686, F2406501, 0626136
 * 湖南省 长沙市 浏阳市区 集里街道 神仙坳社区 大塘冲路 一段 208 阳光家园别墅小区 第10栋别墅
 * */
最近研发肽化版本产生几个心得总结下：
1 养疗经和华瑞集的肽化观测最后是一个文件夹体系。这个体系全部由文件夹组成，文件夹的名字是元基组成。
2 说明 养疗经和华瑞集有对应的肽结构，这个结构我首次命名为类人的智慧永生肽或者生命肽。 
---20210426

上面这个心得可以进行人造染色体和归纳元基染色体，并提供了真实环境的理论科学依据。。
我之前的元基分类 研究排上用场了。

我得到一个结论，目前人类的染色体和生命特征有各种缺陷，

关于元基:
2年前,我认为元基是 一个催化计算的 初始单元和基础. 我当时命名为initon - init aton for caculation      
1年多前开始DNA的元基编码, 我当时庆幸 元基能解释我的索引单元, 我认为是语义的编码索引最小单元.     
后来,我开始DNA的元基计算和肽展公式推导应用, 我觉得元基是 对应(基因元 嘌呤嘧啶)基元的 语义变换单元.     
现在随着养疗经的深入,我开始系统的命名, 元基-是智慧生命进行逻辑表达的最小单元和基础成分.     
     
     
关于催化计算,我在微信中2021-05-19-12.07分描述了一句如下:      
将某一类未解的问题现象和集合,通过已知的已经健全的学术体系去映射模拟计算, 最终结果量化并探索能得到未知的答案,属于一种无理级计算模式.      

关于肽花的计算,我在微信中2021-0518描述如下:      
数据肽索引化后的花状植株,可不是药用这么简单,我刚思考了下,这种蒲公英丝状元基组织是软件的孢子.一种全新的数据类软件生命体表达形式,      
也是永生的必经之路. 我按这种方式进行肽索引,软件函数分类越来越均匀规则.这是一种前沿性智慧分类扩展技术.         
这个数据生命是以人类的DNA和思维方式为参照设计的. 如果用其他方式构造元基,就一定能模拟其他物种,需要严谨的论证.          
先别想那么远,把描述文件弄丰富点.
  
2021年4月26日我在微信说过 华瑞集和养疗经 肽化后的花 就是一种永生药, 现在发现,永生根本就不需要到那个巨的级别, 小小的某一类永生花孢子 就能实现.
我要做的不是永生探讨,这是医学任务,我要做的是实现孢子软件的自我繁殖, 我定义为 生命ETL插件节点. 我的目标是软件的SDLC的自我维护.

今天不写代码,写点思想,描述我是怎么走到这一步的.为了确定我的研发计划是否出现跳跃和分歧.完善下 UML.

2021年5月25日下午16.36我在微信笔记说过,均匀化元基索引最后的结果就是均匀化染色体分类,呈X状,并且 呈蒲公英球状丝化肽元基索引文件夹结构.
Java文件可以逐渐的元基文件夹化.形成文件夹花植株.
具体可以参考 如下文件
M_UnicornNeroThemeETL\OSI\OPE\SI\MCI\OEI\OVU\PQE\extOSGI\OSI_OSU_ASQ_OCQ_OSI_PCI_PCU_MCI_MCU_MSI_OSI_PCI.tvm

20210530 我得到一个信息:随着工程的日益发展演化,P元基的类会越来越多, 如果不进行提取和索引自我AOM元基转化,便会产生智慧级(AOPM)元基分类不均匀,这种倾斜会产生各种问题. --罗瑶光
这是我一个动力,因为O元基和A元基的函数比例越来越小,在均匀染色体索引的领域,我迫切需要做点什么.


20210610 在github gitee 留言中描述下: 我做了一个简单的应用操作,将 包中的相同 元基组 进行过滤并 变成文件夹名中. 我定义为 元基的 根枝扩展. (Initons Root Extension IRE)
IRE 是 未来数据分类的 一个产业趋势. 作用 分类精简, 数据代谢, 数据生长,
我猜测生物的生长过程也是这样的.共用一种模式.


今天开始我把 代码中的analyzer 进行整体替换 为A, 我定义下规则 为 1 函数名 A, 2 定义域名 _A, 3 固定名的后缀 _A. 关于2和3的区别通过观察测前缀是否为开头即可.
例子如下:
A 函数
_A 变量
A_A 函数
 
202106132341今天重定义下 元基词汇编码规则. 比如已经有的词汇 suggest/...OPE.SIU..., 我定义为 .OPESIU. 和 _OPESIU_, 变量为 _开头接OPESIU
这样以后词汇就好区分了, 同时, 词汇可以进行更迅捷的肽展变换.

随着包的越来越小, 现在 函数集合大小仅仅几十兆, 说明元基索引价值越来越明确. 减少内存占比, 提高计算效率, 缩短寻址时间, 算能提高越来越可观. 

索引后进行元基催化计算是一个数字生命诞生的标志. 我迫切需要做些什么, 先把 均匀索引 实现.

 
20210628 这几天在不断的索引均匀和 染色体模拟, 结合我在英特尔当后端测试的一些工作经验, 我发现了一些规律.
1 sonar lint的 if,while,等关键字的 嵌套问题化简, 与我现在的新陈代谢的大文件裁剪 都属于 数据进化的几种模式.
2 元基染色体组均匀索引后, 相同的相似的执行逻辑在同一区间,非常方便 以后的 元基芯片 设计 和 软件工程调度. 提高计算密度. 节约算能
3 我找到了一些元基索引规律如 三元基 对称索引, 非对称索引, 移位索引, 反向索引, 主元基索引. 5种模式.
4 关于TXH 的 计算元基 索引, 我会分出一个RNA 包工程来分开处理. 目前这24组双链 为DNA 包. 
 
 
20210629 今天在裁剪monitor的文件时候,我把2000多行的源码拆成几个300行的文件, 运行也不错.我在思考. 函数像sonar 那样把嵌套if while 拆分,是一种危险的
执行方法. 正确的思路应该是 
1 将大文件裁剪成小文件.
2 小文件将多个函数拆成多个文件.
3 一个函数一个文件还复杂,应该进行变量全局化重复提取到1,2 环节.
4 如果出现嵌套 if和 while, 不是复杂的计算逻辑, sonar 强行语法分析报错 价值不大. 当年我写分词就没按sonar来. 思考了下, 当时按照sonar模式搞,之后我的分词肽化会出问题.
5 想起当年 为了搞个 sonar 测试覆盖率非要搞个100%, 这是一个浪费大量时间的弊端. 
6 最后 sonar的规范中有价值的地方也有, 如 每行的宽度 限制 我不多广告了, sonar是普通开源软件, 任何人都能下得到.

20210630 今天在裁剪monitor 模拟新陈代谢,我把思想规则 浓缩了下.变成方法如下.
1 首先将裁剪的文件名 加 函数名用_XCDX_ 隔开, 如 APP  ...  _XCDX_ ... 函数名.java
2 隔开后生成的文件中如果有变量变成未知,则进行全局化, 引用过来.
3 全局化的变量再进行 duplication, 之后变成单例类.
4 单例类之后变成接口 进行 implement.
5 然后整体进行纠正, 将XCDX函数类变成一个 进化插件植株. 这就是二次新陈代谢模拟.

20210701 今天在处理数据库的裁剪按20210630的方案,我有些笔记如下.
1 一个文件按一类函数的裁剪价值巨大. 方便以后操作系统级别的 调度肽化.
2 逐步的脱离养疗经华瑞集医学属性, 24组元基组 满足API的数据工程适用化,像java一样, 接口引用,参与计算. 
3 我准备设计一种local static 技术, 满足全局静态. 因为DNA 不同于 RNA, 我不希望它new来new去. 不但损耗算能, 还损耗内存.  
4 这个local static 技术, 我之后会在S_AOPM 里面用...SME... 元基组下设计研发.

罗瑶光
浏阳  